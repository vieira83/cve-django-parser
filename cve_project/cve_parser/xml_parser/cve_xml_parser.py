import os
import logging
import xml.etree.ElementTree as ET

from cve_parser.models import CVEEntry, SoftwareList, Reference, CVSSBaseMetric


logger = logging.getLogger(__name__)


dir = os.path.dirname(__file__) #<-- absolute dir the script is in
rel_path = "xml/nvdcve-2.0.xml"
xml_file_path = os.path.join(dir, rel_path)

tree = ET.parse(xml_file_path)
root = tree.getroot()


def parse_xml_entries():
    for entry in root.findall('{http://scap.nist.gov/schema/feed/vulnerability/2.0}entry'):
        db_entry = {}
        xml_entry_url = '{http://scap.nist.gov/schema/vulnerability/0.4}'

        db_entry['cve_id'] = entry.get('id').lower()

        if entry.find(xml_entry_url + 'published-datetime') is not None:
            db_entry['published_time'] = entry.find(xml_entry_url + 'published-datetime').text

        if entry.find(xml_entry_url + 'last-modified-datetime') is not None:
            db_entry['last_modified_time'] = entry.find(xml_entry_url + 'last-modified-datetime').text

        if entry.find(xml_entry_url + 'security-protection') is not None:
            db_entry['security_protection'] = entry.find(xml_entry_url + 'security-protection').text

        if entry.find(xml_entry_url + 'cwe') is not None:
            db_entry['cwe'] = entry.find(xml_entry_url + 'cwe').get('id')

        if entry.find(xml_entry_url + 'summary') is not None:
            db_entry['summary'] = entry.find(xml_entry_url + 'summary').text

        if entry.find(xml_entry_url + 'vulnerable-software-list') is not None:
            software_list = entry.find(xml_entry_url + 'vulnerable-software-list')
            software_list = parse_software_list(software_list)

        if entry.find(xml_entry_url + 'references') is not None:
            references_list = entry.findall(xml_entry_url + 'references')
            references_list = parse_references(references_list)

        if entry.find(xml_entry_url + 'cvss') is not None:
            cvss_base_met = entry.find(xml_entry_url + 'cvss')
            db_entry['cvss_base_metrics'] = parse_cvss_base_metrics(cvss_base_met)

        # entry_model = CVEEntry.objects.get_or_create(**db_entry)

        logger.info(db_entry)

        try:
            obj = CVEEntry.objects.get(cve_id=db_entry['cve_id'])
        except CVEEntry.DoesNotExist:
            obj = CVEEntry(**db_entry)
            obj.save()

            # for list in references_list:
            obj.reference = references_list

            # for list in software_list:
            obj.software_list = software_list

    return obj


def db_store_entries():
    logger.info('----------- Started Parsing CVE XML -----------')
    parse_xml_entries()
    logger.info('-----------  Ended Parsing CVE XML ------------')


def parse_references(refs):
    xml_refs_url = '{http://scap.nist.gov/schema/vulnerability/0.4}'
    db_references = {}
    list_references = []
    for ref in refs:
        db_references['source_name'] = ref.find(xml_refs_url + 'source').text
        db_references['source_type'] = ref.get('reference_type')
        db_references['source_url'] = ref.find(xml_refs_url + 'reference').get('href')
        db_references['source_text'] = ref.find(xml_refs_url + 'reference').text

        match_references, create = Reference.objects.get_or_create(**db_references)
        list_references.append(match_references)

    return list_references


def parse_software_list(products):
    list_products = []

    for prod in products:
        product = prod.text
        match_products, create = SoftwareList.objects.get_or_create(product=product)
        list_products.append(match_products)

    return list_products


def parse_cvss_base_metrics(base_metrics):
    xml_metric_url = '{http://scap.nist.gov/schema/cvss-v2/0.2}'
    db_entry = {}

    for metric in base_metrics.findall(xml_metric_url + 'base_metrics'):
        db_entry['score'] = metric.find(xml_metric_url + 'score').text
        db_entry['access_vector'] = metric.find(xml_metric_url + 'access-vector').text
        db_entry['access_complexity'] = metric.find(xml_metric_url + 'access-complexity').text
        db_entry['authentication'] = metric.find(xml_metric_url + 'authentication').text
        db_entry['confidentiality_impact'] = metric.find(xml_metric_url + 'confidentiality-impact').text
        db_entry['integrity_impact'] = metric.find(xml_metric_url + 'integrity-impact').text
        db_entry['availability_impact'] = metric.find(xml_metric_url + 'availability-impact').text
        db_entry['source'] = metric.find(xml_metric_url + 'source').text
        db_entry['generated_datetime'] = metric.find(xml_metric_url + 'generated-on-datetime').text

    try:
        obj = CVSSBaseMetric.objects.get(score=db_entry['score'])
    except CVSSBaseMetric.DoesNotExist:
        obj = CVSSBaseMetric(**db_entry)
        obj.save()

    return obj
